{
	"nextDay": {
		"Monday": "Tuesday",
		"Tuesday": "Wednesday",
		"Wednesday": "Thursday",
		"Thursday": "Friday",
		"Friday": "Saturday",
		"Saturday": "Sunday",
		"Sunday": "Monday"
	},
	"nextTimeOfDay": {
		"morning": "afternoon",
		"afternoon": "evening",
		"evening": "night-time",
		"night-time": "really fucking late into the night",
		"really fucking late into the night": "really fucking late into the night"
	},
	"previousTimeOfDay": {
		"really fucking late into the night": "night-time",
		"night-time": "evening",
		"evening": "afternoon",
		"afternoon": "morning",
		"morning": "morning"
	},
	"advanceTimeOfDay": "const nextTimeOfDay = staticData.nextTimeOfDay[gameData.timeOfDay]; if (nextTimeOfDay !== gameData.timeOfDay) { eval(staticData.advanceNPCSchedules) } nextTimeOfDay;",
	"advanceNPCSchedules": "const scheduleDayType = staticData.dayOfTheWeekToScheduleDay[gameData.currentDay]; for (const npcName of Object.keys(gameData.npcs)) { gameData.npcs[npcName].previousLocation = gameData.npcs[npcName].currentLocation; gameData.npcs[npcName].currentLocation = eval(staticData.npcSchedules[npcName][scheduleDayType][nextTimeOfDay]); }",
	"sleepUntilMorning": "while (gameData.timeOfDay !== 'really fucking late into the night') { gameData.timeOfDay = eval(staticData.advanceTimeOfDay); } gameData.currentDay = staticData.nextDay[gameData.currentDay]; gameData.timeOfDay = 'morning'; const nextTimeOfDay = gameData.timeOfDay; eval(staticData.advanceNPCSchedules); gameData.timeOfDay;",
	"levelUpCheck": {
		"lower": "(20 + ((10 * gameData.player.muscle.lower.level) * Math.log10(10 * gameData.player.muscle.lower.level))) <= gameData.player.muscle.lower.exp",
		"upper": "(20 + ((10 * gameData.player.muscle.upper.level) * Math.log10(10 * gameData.player.muscle.upper.level))) <= gameData.player.muscle.upper.exp"
	},
	"liftingFormulas": {
		"benchPress": "45 + (10 * (gameData.player.muscle.upper.level - 1))",
		"squat": "45 + (15 * (gameData.player.muscle.lower.level - 1))",
		"deadlift": "45 + (10 * (gameData.player.muscle.lower.level - 1)) + (10 * (gameData.player.muscle.upper.level - 1))",
		"dumbbellCurl": "5 + (Math.floor((2 * (gameData.player.muscle.upper.level - 1)) / 5) * 5)",
		"dumbbellLunge": "5 + (Math.floor((4 * (gameData.player.muscle.upper.level - 1)) / 5) * 5)"
    },
	"dayOfTheWeekToScheduleDay": {
		"Monday": "Weekday",
		"Tuesday": "Weekday",
		"Wednesday": "Weekday",
		"Thursday": "Weekday",
		"Friday": "Friday",
		"Saturday": "Saturday",
		"Sunday": "Sunday"
    },
    "fightScripts": {
        "executeMoves": "eval(staticData.fightScripts.prepareMoves); if (gameData.currentFight.player.speed > gameData.currentFight.opponent.speed) { eval(staticData.fightScripts.executePlayerFirst) } else { eval(staticData.fightScripts.executePlayerLast) } false;",
        "executePlayerFirst": "const actionTaker = gameData.currentFight.player; const waitingPerson = gameData.currentFight.opponent; eval(staticData.fightScripts.moveExecuteScripts[staticData.fightMoves[actionTaker.currentMove].moveType]); if (waitingPerson.hp) { const actionTaker = gameData.currentFight.opponent; const waitingPerson = gameData.currentFight.player; eval(staticData.fightScripts.moveExecuteScripts[staticData.fightMoves[actionTaker.currentMove].moveType]); } waitingPerson.previousMove = waitingPerson.currentMove; actionTaker.previousMove = actionTaker.currentMove;",
        "executePlayerLast": "const actionTaker = gameData.currentFight.opponent; const waitingPerson = gameData.currentFight.player; eval(staticData.fightScripts.moveExecuteScripts[staticData.fightMoves[actionTaker.currentMove].moveType]); if (waitingPerson.hp) { const actionTaker = gameData.currentFight.player; const waitingPerson = gameData.currentFight.opponent; eval(staticData.fightScripts.moveExecuteScripts[staticData.fightMoves[actionTaker.currentMove].moveType]); } waitingPerson.previousMove = waitingPerson.currentMove; actionTaker.previousMove = actionTaker.currentMove;",
        "prepareMoves": "let mover = gameData.currentFight.player; mover.currentMove = playerMoveName; eval(staticData.fightScripts.prepareMove); mover = gameData.currentFight.opponent; mover.currentMove = eval(staticData.npcFightStats[mover.key].moveScript); eval(staticData.fightScripts.prepareMove);",
        "prepareMove": "const move = staticData.fightMoves[mover.currentMove]; eval(staticData.fightScripts.movePrepareScripts[move.moveType]);",
        "determineMoveAmount": "const roll = Math.floor(Math.random() * move.diceAmount); roll ? Math.floor(mover[move.muscleType] * move.baseModifier + ((mover[move.muscleType] * move.rollModifier * roll) / move.diceAmount)) : Math.floor(mover[move.muscleType] * move.baseModifier + mover[move.muscleType] * move.criticalRollModifier)",
        "movePrepareScripts": {
            "attack": "const amount = eval(staticData.fightScripts.determineMoveAmount); mover.attackAmount = amount; mover.defendAmount = 0; mover.moveText = ''",
            "defend": "const amount = eval(staticData.fightScripts.determineMoveAmount); mover.attackAmount = 0; mover.defendAmount = amount; mover.moveText = ''",
            "description": "mover.attackAmount = 0; mover.defendAmount = 0; mover.moveText = ''"
        },
        "moveExecuteScripts": {
            "attack": "let netAttackAmount = actionTaker.attackAmount - waitingPerson.defendAmount; if (netAttackAmount < 0) { netAttackAmount = 0; } waitingPerson.hp = waitingPerson.hp - netAttackAmount; if (waitingPerson.hp < 0) { waitingPerson.hp = 0; } actionTaker.moveText = (actionTaker === gameData.currentFight.player ? 'I use ' + staticData.fightMoves[actionTaker.currentMove].name + '. It inflicts ' + netAttackAmount + ' damage.' : actionTaker.name + ' uses ' + staticData.fightMoves[actionTaker.currentMove].name + '. It inflicts ' + netAttackAmount + ' damage.');",
            "defend": "actionTaker.moveText = (actionTaker === gameData.currentFight.player ? 'I use ' + staticData.fightMoves[actionTaker.currentMove].name + '. Incoming attacks this turn are reduced.' : actionTaker.name + ' uses ' + staticData.fightMoves[actionTaker.currentMove].name + '. Incoming attacks this turn are reduced.');",
            "description": "actionTaker.moveText = staticData.fightMoves[actionTaker.currentMove].text"
        }
    },
    "fightMoves": {
        "punch": {
            "name": "Punch",
            "moveType": "attack",
            "muscleType": "upper",
            "baseModifier": 1.0,
            "diceAmount": 20,
            "rollModifier": 0.5,
            "criticalRollModifier": 1.0
        },
        "kick": {
            "name": "Kick",
            "moveType": "attack",
            "muscleType": "lower",
            "baseModifier": 1.0, 
            "diceAmount": 20,
            "rollModifier": 0.5,
            "criticalRollModifier": 1.0
        },
        "block": {
            "name": "Block",
            "moveType": "defend",
            "muscleType": "upper",
            "baseModifier": 1.0,
            "diceAmount": 4, 
            "rollModifier": 2.0,
            "criticalRollModifier": 100.0
        },
        "brochargeup": {
            "name": "Charge",
            "moveType": "description",
            "text": "Your brother brings his fist back... He's charging up!"
        },
        "legendaryFistOfTheOlderBrother": {
            "name": "Legendary Fist of the Older Brother",
            "moveType": "attack",
            "muscleType": "upper",
            "baseModifier": 1.5,
            "diceAmount": 10,
            "rollModifier": 1.5,
            "criticalRollModifier": 2.0
        }
    },
    "npcFightStats": {
        "brother": {
            "maxHp": 160,
            "speed": 6,
            "upper": 12,
            "lower": 6,
            "exp": {
                "upper": 20,
                "lower": 10
            },
            "moveScript": "gameData.currentFight.opponent.previousMove === 'brochargeup' ? 'legendaryFistOfTheOlderBrother' : (Math.floor(Math.random() * 4) ? ( Math.floor(Math.random() * 2) ? 'punch' : 'kick' ) : 'brochargeup')"
        }
    },
	"npcSchedules": {
		"brother": {
			"Weekday": {
				"morning": "gameData.npcs.brother.roomLocked = false; gameData.npcs.brother.beatUp = false; 'kitchen'",
				"afternoon": "'work'",
				"evening": "Math.floor(Math.random() * 4) ? 'bar' : 'kitchen'",
				"night-time": "gameData.npcs.brother.previousLocation === 'bar' ? 'kitchen' : 'room'",
				"really fucking late into the night": "'room'"
			},
			"Friday": {
				"morning": "gameData.npcs.brother.roomLocked = false; gameData.npcs.brother.beatUp = false; 'kitchen'",
				"afternoon": "'work'",
				"evening": "'bar'",
				"night-time": "'bar'",
				"really fucking late into the night": "'kitchen'"
			},
			"Saturday": {
				"morning": "gameData.npcs.brother.roomLocked = false; gameData.npcs.brother.beatUp = false; Math.floor(Math.random() * 2) ? 'room' : 'kitchen'",
				"afternoon": "Math.floor(Math.random() * 2) ? 'jog' : 'gym'",
				"evening": "'bar'",
				"night-time": "'bar'",
				"really fucking late into the night": "'bar'"
			},
			"Sunday": {
				"morning": "gameData.npcs.brother.roomLocked = false; gameData.npcs.brother.beatUp = false; Math.floor(Math.random() * 2) ? 'room' : 'kitchen'",
				"afternoon": "'kitchen'",
				"evening": "Math.floor(Math.random() * 2) ? 'jog' : 'gym'",
				"night-time": "'kitchen'",
				"really fucking late into the night": "'room'"
			}
		},
		"mom": {
			"Weekday": {
				"morning": "'kitchen'",
				"afternoon": "'work'",
				"evening": "Math.floor(Math.random() * 10) ? (Math.floor(Math.random() * 10) ? 'work' : 'kitchen' ) : 'bar'",
				"night-time": "gameData.npcs.mom.previousLocation === 'bar' ? 'bar' : (gameData.npcs.mom.previousLocation === 'kitchen' ? 'kitchen' : (Math.floor(Math.random() * 5) ? 'kitchen' : 'work'))",
				"really fucking late into the night": "gameData.npcs.mom.previousLocation === 'kitchen' ? 'room' : 'kitchen'"
			},
			"Friday": {
				"morning": "'kitchen'",
				"afternoon": "'work'",
				"evening": "Math.floor(Math.random() * 5) ? 'kitchen' : 'bar'",
				"night-time": "gameData.npcs.mom.previousLocation",
				"really fucking late into the night": "'kitchen'"
			},
			"Saturday": {
				"morning": "'kitchen'",
				"afternoon": "'kitchen'",
				"evening": "'kitchen'",
				"night-time": "'kitchen'",
				"really fucking late into the night": "'room'"
			},
			"Sunday": {
				"morning": "'kitchen'",
				"afternoon": "'kitchen'",
				"evening": "'kitchen'",
				"night-time": "'kitchen'",
				"really fucking late into the night": "'room'"
			}
		}
	},
	"sizeFormulas": {
		"arms": "8.0 + (gameData.player.muscle.upper.level > 25 ? (Math.round((14 * Math.log10((1 + ((gameData.player.muscle.upper.level - 1) * 0.4)))) * 2) / 2) : (Math.round((14 * 0.04 * (gameData.player.muscle.upper.level - 1)) * 2) / 2))",
		"chest": "28.0 + (gameData.player.muscle.upper.level > 25 ? (Math.round((24 * Math.log10((1 + ((gameData.player.muscle.upper.level - 1) * 0.4)))) * 2) / 2) : (Math.round((24 * 0.04 * (gameData.player.muscle.upper.level - 1)) * 2) / 2))",
		"waist": "24.0 + (gameData.player.muscle.upper.level > 25 ? (Math.round((4 * Math.log10((1 + ((gameData.player.muscle.upper.level - 1) * 0.4)))) * 2) / 2) : (Math.round((4 * 0.04 * (gameData.player.muscle.upper.level - 1)) * 2) / 2))",
		"hips": "26.0 + (gameData.player.muscle.lower.level > 25 ? (Math.round((12 * Math.log10((1 + ((gameData.player.muscle.lower.level - 1) * 0.4)))) * 2) / 2) : (Math.round((12 * 0.04 * (gameData.player.muscle.lower.level - 1)) * 2) / 2))",
		"thighs": "15.0 + (gameData.player.muscle.lower.level > 25 ? (Math.round((20 * Math.log10((1 + ((gameData.player.muscle.lower.level - 1) * 0.4)))) * 2) / 2) : (Math.round((20 * 0.04 * (gameData.player.muscle.lower.level - 1)) * 2) / 2))",
		"calves": "9.0 + (gameData.player.muscle.lower.level > 25 ? (Math.round((15 * Math.log10((1 + ((gameData.player.muscle.lower.level - 1) * 0.4)))) * 2) / 2) : (Math.round((15 * 0.04 * (gameData.player.muscle.lower.level - 1)) * 2) / 2))",
		"weight": "80.0 + (gameData.player.muscle.upper.level > 25 ? (Math.round((85 * Math.log10((1 + ((gameData.player.muscle.upper.level - 1) * 0.4)))) * 2) / 2) : (Math.round((85 * 0.04 * (gameData.player.muscle.upper.level - 1)) * 2) / 2)) + (gameData.player.muscle.lower.level > 25 ? (Math.round((85 * Math.log10((1 + ((gameData.player.muscle.lower.level - 1) * 0.4)))) * 2) / 2) : (Math.round((85 * 0.04 * (gameData.player.muscle.lower.level - 1)) * 2) / 2))"
	}
}